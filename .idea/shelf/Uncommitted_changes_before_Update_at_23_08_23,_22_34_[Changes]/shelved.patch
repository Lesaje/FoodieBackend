Index: src/main/scala/db/pubsub/controllers/empty.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package db.pubsub.controllers\n\nobject empty {\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/scala/db/pubsub/controllers/empty.scala b/src/main/scala/db/pubsub/controllers/empty.scala
--- a/src/main/scala/db/pubsub/controllers/empty.scala	(revision 109c58a6b5272711bf0b76c21c398075e2b78500)
+++ b/src/main/scala/db/pubsub/controllers/empty.scala	(date 1692816104431)
@@ -1,5 +1,66 @@
 package db.pubsub.controllers
 
-object empty {
+import cats.effect.*
+import cats.syntax.all.*
+import dev.hnaderi.namedcodec.*
+import fs2.Stream
+import fs2.Stream.*
+import io.circe.generic.auto.*
+import lepus.circe.given
+import lepus.client.*
+import lepus.protocol.domains.*
+import lepus.std.*
+
+import scala.concurrent.duration.*
+
+object PubSub extends IOApp.Simple {
+
+  private val protocol =
+    TopicDefinition(
+      ExchangeName("events"),
+      ChannelCodec.default(CirceAdapter.of[Event]),
+      TopicNameEncoder.of[Event]
+    )
+
+  def publisher(con: Connection[IO]) = for {
+    ch <- resource(con.channel)
+    bus <- eval(EventChannel.publisher(protocol, ch))
+    (toPublish, idx) <- Stream(
+      Event.Created("b"),
+      Event.Updated("a", 10),
+      Event.Updated("b", 100),
+      Event.Created("c")
+    ).zipWithIndex
+    _ <- eval(bus.publish(ShortString.from(idx), toPublish))
+  } yield ()
+
+  def consumer1(con: Connection[IO]) = for {
+    ch <- resource(con.channel)
+    bus <- eval(EventChannel.consumer(protocol)(ch))
+    evt <- bus.events
+    _ <- eval(IO.println(s"consumer 1: $evt"))
+  } yield ()
+
+  def consumer2(con: Connection[IO]) = for {
+    ch <- resource(con.channel)
+    bus <- eval(
+      EventChannel.consumer(protocol, ch, TopicSelector("Created"))
+    )
+    evt <- bus.events
+    _ <- eval(IO.println(s"consumer 2: $evt"))
+  } yield ()
 
+  override def run: IO[Unit] = LepusClient[IO]().use { con =>
+    Stream(publisher(con), consumer1(con), consumer2(con)).parJoinUnbounded
+      // This is needed in this example, in order to terminate application
+      .interruptAfter(5.seconds)
+      .compile
+      .drain
+  }
 }
+
+enum Event {
+  case Created(id: String)
+  case Updated(id: String, value: Int)
+}
+
Index: build.sbt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>ThisBuild / version := \"0.1.0-SNAPSHOT\"\n\nThisBuild / scalaVersion := \"3.3.0\"\n\nlazy val root = (project in file(\".\"))\n  .settings(\n    name := \"Foodie\"\n  )\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.sbt b/build.sbt
--- a/build.sbt	(revision 109c58a6b5272711bf0b76c21c398075e2b78500)
+++ b/build.sbt	(date 1692816072395)
@@ -2,6 +2,9 @@
 
 ThisBuild / scalaVersion := "3.3.0"
 
+libraryDependencies += "org.tpolecat" %% "skunk-core" % "0.6.0"
+libraryDependencies += "dev.hnaderi" %% "lepus-client" % "0.4.1"
+
 lazy val root = (project in file("."))
   .settings(
     name := "Foodie"
Index: src/main/scala/db/pubsub/view/PubSub.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package db.pubsub.view\n\ntrait PubSub {\n  def pull (): Unit\n  def push (): Unit\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/scala/db/pubsub/view/PubSub.scala b/src/main/scala/db/pubsub/view/PubSub.scala
--- a/src/main/scala/db/pubsub/view/PubSub.scala	(revision 109c58a6b5272711bf0b76c21c398075e2b78500)
+++ b/src/main/scala/db/pubsub/view/PubSub.scala	(date 1692796034555)
@@ -3,5 +3,4 @@
 trait PubSub {
   def pull (): Unit
   def push (): Unit
-
 }
