Index: src/main/scala/db/pubsub/controllers/empty.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package db.pubsub.controllers\n\nobject empty {\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/scala/db/pubsub/controllers/empty.scala b/src/main/scala/db/pubsub/controllers/empty.scala
--- a/src/main/scala/db/pubsub/controllers/empty.scala	(revision 097e874881b36b39d8bd4008e4c743780c636680)
+++ b/src/main/scala/db/pubsub/controllers/empty.scala	(date 1692819922986)
@@ -1,5 +1,66 @@
 package db.pubsub.controllers
 
-object empty {
+import cats.effect.*
+import cats.syntax.all.*
+import dev.hnaderi.namedcodec.*
+import fs2.Stream
+import fs2.Stream.*
+import io.circe.generic.auto.*
+import lepus.circe.given
+import lepus.client.*
+import lepus.protocol.domains.*
+import lepus.std.*
+
+import scala.concurrent.duration.*
+
+object PubSub extends IOApp.Simple {
+
+  private val protocol =
+    TopicDefinition(
+      ExchangeName("events"),
+      ChannelCodec.default(CirceAdapter.of[Event]),
+      TopicNameEncoder.of[Event]
+    )
+
+  def publisher(con: Connection[IO]) = for {
+    ch <- resource(con.channel)
+    bus <- eval(EventChannel.publisher(protocol, ch))
+    (toPublish, idx) <- Stream(
+      Event.Created("b"),
+      Event.Updated("a", 10),
+      Event.Updated("b", 100),
+      Event.Created("c")
+    ).zipWithIndex
+    _ <- eval(bus.publish(ShortString.from(idx), toPublish))
+  } yield ()
+
+  def consumer1(con: Connection[IO]) = for {
+    ch <- resource(con.channel)
+    bus <- eval(EventChannel.consumer(protocol)(ch))
+    evt <- bus.events
+    _ <- eval(IO.println(s"consumer 1: $evt"))
+  } yield ()
+
+  def consumer2(con: Connection[IO]) = for {
+    ch <- resource(con.channel)
+    bus <- eval(
+      EventChannel.consumer(protocol, ch, TopicSelector("Created"))
+    )
+    evt <- bus.events
+    _ <- eval(IO.println(s"consumer 2: $evt"))
+  } yield ()
 
+  override def run: IO[Unit] = LepusClient[IO]().use { con =>
+    Stream(publisher(con), consumer1(con), consumer2(con)).parJoinUnbounded
+      // This is needed in this example, in order to terminate application
+      .interruptAfter(5.seconds)
+      .compile
+      .drain
+  }
 }
+
+enum Event {
+  case Created(id: String)
+  case Updated(id: String, value: Int)
+}
+
Index: build.sbt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Dependencies._\n\nThisBuild / organization := \"foodie\"\nThisBuild / version := \"0.1.0-SNAPSHOT\"\nThisBuild / scalaVersion := \"3.3.0\"\n\nlazy val root = (project in file(\".\"))\n  .settings(\n    name := \"Foodie\"\n  )\n\nlibraryDependencies ++= dependencies\n\nlazy val dependencies =\n  cats ++ `cats-effect` ++ fs2 ++ pureconfig ++\n    http4s ++ skunk ++ lepus ++ `munit-cats-effect` :+ \"dev.hnaderi\" %% \"named-codec\" % \"0.1.0\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.sbt b/build.sbt
--- a/build.sbt	(revision 097e874881b36b39d8bd4008e4c743780c636680)
+++ b/build.sbt	(date 1692819922998)
@@ -4,6 +4,9 @@
 ThisBuild / version := "0.1.0-SNAPSHOT"
 ThisBuild / scalaVersion := "3.3.0"
 
+libraryDependencies += "org.tpolecat" %% "skunk-core" % "0.6.0"
+libraryDependencies += "dev.hnaderi" %% "lepus-client" % "0.4.1"
+
 lazy val root = (project in file("."))
   .settings(
     name := "Foodie"
Index: .bsp/sbt.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"name\":\"sbt\",\"version\":\"1.9.3\",\"bspVersion\":\"2.1.0-M1\",\"languages\":[\"scala\"],\"argv\":[\"C:\\\\Program Files\\\\Java\\\\jdk-11.0.16/bin/java\",\"-Xms100m\",\"-Xmx100m\",\"-classpath\",\"C:/Users/USER/AppData/Roaming/JetBrains/IntelliJIdea2022.2/plugins/Scala/launcher/sbt-launch.jar\",\"xsbt.boot.Boot\",\"-bsp\",\"--sbt-launch-jar=C:/Users/USER/AppData/Roaming/JetBrains/IntelliJIdea2022.2/plugins/Scala/launcher/sbt-launch.jar\"]}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.bsp/sbt.json b/.bsp/sbt.json
--- a/.bsp/sbt.json	(revision 097e874881b36b39d8bd4008e4c743780c636680)
+++ b/.bsp/sbt.json	(date 1692819922990)
@@ -1,1 +1,1 @@
-{"name":"sbt","version":"1.9.3","bspVersion":"2.1.0-M1","languages":["scala"],"argv":["C:\\Program Files\\Java\\jdk-11.0.16/bin/java","-Xms100m","-Xmx100m","-classpath","C:/Users/USER/AppData/Roaming/JetBrains/IntelliJIdea2022.2/plugins/Scala/launcher/sbt-launch.jar","xsbt.boot.Boot","-bsp","--sbt-launch-jar=C:/Users/USER/AppData/Roaming/JetBrains/IntelliJIdea2022.2/plugins/Scala/launcher/sbt-launch.jar"]}
\ No newline at end of file
+{"name":"sbt","version":"1.9.3","bspVersion":"2.1.0-M1","languages":["scala"],"argv":["/home/kuver/.jdks/openjdk-20.0.2/bin/java","-Xms100m","-Xmx100m","-classpath","/home/kuver/.local/share/JetBrains/IntelliJIdea2023.2/Scala/launcher/sbt-launch.jar","xsbt.boot.Boot","-bsp","--sbt-launch-jar=/home/kuver/.local/share/JetBrains/IntelliJIdea2023.2/Scala/launcher/sbt-launch.jar"]}
\ No newline at end of file
Index: src/main/scala/db/pubsub/view/PubSub.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package db.pubsub.view\n\ntrait PubSub {\n  def pull (): Unit\n  def push (): Unit\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/scala/db/pubsub/view/PubSub.scala b/src/main/scala/db/pubsub/view/PubSub.scala
--- a/src/main/scala/db/pubsub/view/PubSub.scala	(revision 097e874881b36b39d8bd4008e4c743780c636680)
+++ b/src/main/scala/db/pubsub/view/PubSub.scala	(date 1692819923006)
@@ -3,5 +3,4 @@
 trait PubSub {
   def pull (): Unit
   def push (): Unit
-
 }
